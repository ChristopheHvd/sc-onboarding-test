// <auto-generated />
using System;
using System.Collections;
using Data.SchemaMigrator.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.SchemaMigrator.Migrations
{
    [DbContext(typeof(PlasticoDbContext))]
    partial class PlasticoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:pg_buffercache", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:pg_stat_statements", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:pgcrypto", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:pgrouting", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:postgis_topology", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Data.SchemaMigrator.Models.AiModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("model","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.ArrondissementDepartemental", b =>
                {
                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("InseeArr")
                        .HasColumnName("insee_arr")
                        .HasColumnType("text");

                    b.Property<string>("InseeDep")
                        .HasColumnName("insee_dep")
                        .HasColumnType("text");

                    b.Property<string>("InseeReg")
                        .HasColumnName("insee_reg")
                        .HasColumnType("text");

                    b.ToTable("arrondissement_departemental","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.BassinVersantTopographique", b =>
                {
                    b.Property<string>("BFluvial")
                        .HasColumnName("b_fluvial")
                        .HasColumnType("text");

                    b.Property<string>("BassHydro")
                        .HasColumnName("bass_hydro")
                        .HasColumnType("text");

                    b.Property<string>("CodeBh")
                        .HasColumnName("code_bh")
                        .HasColumnType("text");

                    b.Property<string>("CodeCarth")
                        .HasColumnName("code_carth")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdCEau")
                        .HasColumnName("id_c_eau")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<string>("PrecPlani")
                        .HasColumnName("prec_plani")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("SrcCoord")
                        .HasColumnName("src_coord")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.Property<string>("Toponyme")
                        .HasColumnName("toponyme")
                        .HasColumnType("text");

                    b.ToTable("bassin_versant_topographique","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.BoundingBoxes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Height")
                        .HasColumnName("height")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdCreatorFk")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRefImagesForLabelling")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefTrashTypeFk")
                        .HasColumnType("integer");

                    b.Property<int>("LocationX")
                        .HasColumnName("locationX")
                        .HasColumnType("integer");

                    b.Property<int>("LocationY")
                        .HasColumnName("locationY")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnName("width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCreatorFk");

                    b.HasIndex("IdRefImagesForLabelling");

                    b.HasIndex("IdRefTrashTypeFk");

                    b.ToTable("bounding_boxes","label");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.CampaignRiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<string>("RiverName")
                        .HasColumnName("river_name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.ToTable("campaign_river","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Campaign_Bi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AvgSpeed")
                        .HasColumnName("avg_speed")
                        .HasColumnType("integer");

                    b.Property<string>("BlobName")
                        .HasColumnName("blob_name")
                        .HasColumnType("text");

                    b.Property<string>("ContainerUrl")
                        .HasColumnName("container_url")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("date");

                    b.Property<double?>("DistanceStartEnd")
                        .HasColumnName("distance_start_end")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<Geometry>("EndPoint")
                        .HasColumnName("end_point")
                        .HasColumnType("geometry");

                    b.Property<double?>("EndPointDistanceSea")
                        .HasColumnName("end_point_distance_sea")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefUserFk")
                        .HasColumnName("id_ref_user_fk")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Isaidriven")
                        .HasColumnName("isaidriven")
                        .HasColumnType("boolean");

                    b.Property<string>("Locomotion")
                        .HasColumnName("locomotion")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("text");

                    b.Property<string>("Riverside")
                        .HasColumnName("riverside")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<Geometry>("StartPoint")
                        .HasColumnName("start_point")
                        .HasColumnType("geometry");

                    b.Property<double?>("StartPointDistanceSea")
                        .HasColumnName("start_point_distance_sea")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalDistance")
                        .HasColumnName("total_distance")
                        .HasColumnType("double precision");

                    b.Property<int?>("TrashCount")
                        .HasColumnName("trash_count")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EndPoint")
                        .HasName("campaign_end_point")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.HasIndex("IdRefCampaignFk")
                        .HasName("campaign_id_ref_campaign_fk");

                    b.HasIndex("StartPoint")
                        .HasName("campaign_start_point")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("campaign","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Campaign_Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BlobName")
                        .HasColumnName("blob_name")
                        .HasColumnType("text");

                    b.Property<string>("ContainerUrl")
                        .HasColumnName("container_url")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefUserFk")
                        .HasColumnName("id_ref_user_fk")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Isaidriven")
                        .HasColumnName("isaidriven")
                        .HasColumnType("boolean");

                    b.Property<string>("Locomotion")
                        .IsRequired()
                        .HasColumnName("locomotion")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("text");

                    b.Property<string>("Riverside")
                        .HasColumnName("riverside")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("campaign_id");

                    b.HasIndex("IdRefModelFk");

                    b.HasIndex("IdRefUserFk");

                    b.ToTable("campaign","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.ChefLieu", b =>
                {
                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("InseeCom")
                        .HasColumnName("insee_com")
                        .HasColumnType("text");

                    b.Property<string>("NomChf")
                        .HasColumnName("nom_chf")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.ToTable("chef_lieu","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Commune", b =>
                {
                    b.Property<string>("CodeEpci")
                        .HasColumnName("code_epci")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("InseeArr")
                        .HasColumnName("insee_arr")
                        .HasColumnType("text");

                    b.Property<string>("InseeCom")
                        .HasColumnName("insee_com")
                        .HasColumnType("text");

                    b.Property<string>("InseeDep")
                        .HasColumnName("insee_dep")
                        .HasColumnType("text");

                    b.Property<string>("InseeReg")
                        .HasColumnName("insee_reg")
                        .HasColumnType("text");

                    b.Property<string>("NomCom")
                        .HasColumnName("nom_com")
                        .HasColumnType("text");

                    b.Property<string>("NomComM")
                        .HasColumnName("nom_com_m")
                        .HasColumnType("text");

                    b.Property<string>("NomDep")
                        .HasColumnName("nom_dep")
                        .HasColumnType("text");

                    b.Property<string>("NomReg")
                        .HasColumnName("nom_reg")
                        .HasColumnType("text");

                    b.Property<string>("Population")
                        .HasColumnName("population")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.ToTable("commune","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("country_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("country_name_key");

                    b.HasIndex("TheGeom")
                        .HasName("country_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("country","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.CoursDEau", b =>
                {
                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("text");

                    b.Property<string>("Maree")
                        .HasColumnName("maree")
                        .HasColumnType("text");

                    b.Property<string>("Permanent")
                        .HasColumnName("permanent")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.Property<string>("StatutTop")
                        .HasColumnName("statut_top")
                        .HasColumnType("text");

                    b.Property<string>("Toponyme")
                        .HasColumnName("toponyme")
                        .HasColumnType("text");

                    b.HasIndex("Geometry")
                        .HasName("raw_data_cours_d_eau_geometry")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("cours_d_eau","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Departement", b =>
                {
                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("InseeDep")
                        .HasColumnName("insee_dep")
                        .HasColumnType("text");

                    b.Property<string>("InseeReg")
                        .HasColumnName("insee_reg")
                        .HasColumnType("text");

                    b.Property<string>("NomDep")
                        .HasColumnName("nom_dep")
                        .HasColumnType("text");

                    b.HasIndex("Geometry")
                        .HasName("raw_data_departement_geometry")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("departement","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefStateFk")
                        .HasColumnName("id_ref_state_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("referential_department_code");

                    b.HasIndex("IdRefStateFk");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("department_name_key");

                    b.HasIndex("TheGeom")
                        .HasName("referential_department_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("department","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.DetailHydrographique", b =>
                {
                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<string>("Etat")
                        .HasColumnName("etat")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("text");

                    b.Property<string>("NatDetail")
                        .HasColumnName("nat_detail")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("PrecPlani")
                        .HasColumnName("prec_plani")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("StatutTop")
                        .HasColumnName("statut_top")
                        .HasColumnType("text");

                    b.Property<string>("Toponyme")
                        .HasColumnName("toponyme")
                        .HasColumnType("text");

                    b.ToTable("detail_hydrographique","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Epci", b =>
                {
                    b.Property<string>("CodeEpci")
                        .HasColumnName("code_epci")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("NomEpci")
                        .HasColumnName("nom_epci")
                        .HasColumnType("text");

                    b.Property<string>("TypeEpci")
                        .HasColumnName("type_epci")
                        .HasColumnType("text");

                    b.ToTable("epci","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.ImagesForLabelling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BlobName")
                        .HasColumnName("blob_name")
                        .HasColumnType("text");

                    b.Property<string>("ContainerUrl")
                        .HasColumnName("container_url")
                        .HasColumnType("text");

                    b.Property<string>("Context")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filename")
                        .HasColumnName("filename")
                        .HasColumnType("text");

                    b.Property<Guid>("IdCreatorFk")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageQuality")
                        .HasColumnName("image_quality")
                        .HasColumnType("text");

                    b.Property<string>("View")
                        .HasColumnName("view")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdCreatorFk");

                    b.ToTable("images_for_labelling","label");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.LimiteTerreMer", b =>
                {
                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<string>("CodePays")
                        .HasColumnName("code_pays")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Niveau")
                        .HasColumnName("niveau")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<string>("PrecPlani")
                        .HasColumnName("prec_plani")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("SrcCoord")
                        .HasColumnName("src_coord")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.Property<string>("TypeLimit")
                        .HasColumnName("type_limit")
                        .HasColumnType("text");

                    b.HasIndex("Geometry")
                        .HasName("raw_data_limite_terre_mer_geometry")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("limite_terre_mer","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.LimitsLandSea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefCountryFk")
                        .HasColumnName("id_ref_country_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCountryFk");

                    b.HasIndex("TheGeom")
                        .HasName("limits_land_sea_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("limits_land_sea","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Logs", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<double?>("ElapsedTime")
                        .HasColumnName("elapsed_time")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("FinishedOn")
                        .HasColumnName("finished_on")
                        .HasColumnType("date");

                    b.Property<DateTime>("InitiatedOn")
                        .HasColumnName("initiated_on")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("logs","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Blobname")
                        .IsRequired()
                        .HasColumnName("blobname")
                        .HasColumnType("text");

                    b.Property<string>("Containerurl")
                        .IsRequired()
                        .HasColumnName("containerurl")
                        .HasColumnType("text");

                    b.Property<string>("Createdby")
                        .IsRequired()
                        .HasColumnName("createdby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnName("filename")
                        .HasColumnType("text");

                    b.Property<Guid?>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefTrajectoryPointsFk")
                        .HasColumnName("id_ref_trajectory_points_fk")
                        .HasColumnType("uuid");

                    b.Property<BitArray>("Isdeleted")
                        .IsRequired()
                        .HasColumnName("isdeleted")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk");

                    b.HasIndex("IdRefTrajectoryPointsFk");

                    b.ToTable("medias","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefDepartmentFk")
                        .HasColumnName("id_ref_department_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("municipality_code");

                    b.HasIndex("IdRefDepartmentFk");

                    b.HasIndex("TheGeom")
                        .HasName("municipality_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("municipality","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.NoeudHydrographique", b =>
                {
                    b.Property<string>("Categorie")
                        .HasColumnName("categorie")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<string>("CodePays")
                        .HasColumnName("code_pays")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdCeAmon")
                        .HasColumnName("id_ce_amon")
                        .HasColumnType("text");

                    b.Property<string>("IdCeAval")
                        .HasColumnName("id_ce_aval")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("PrecAlti")
                        .HasColumnName("prec_alti")
                        .HasColumnType("text");

                    b.Property<string>("PrecPlani")
                        .HasColumnName("prec_plani")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("SrcAlti")
                        .HasColumnName("src_alti")
                        .HasColumnType("text");

                    b.Property<string>("SrcCoord")
                        .HasColumnName("src_coord")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.Property<string>("StatutTop")
                        .HasColumnName("statut_top")
                        .HasColumnType("text");

                    b.Property<string>("Toponyme")
                        .HasColumnName("toponyme")
                        .HasColumnType("text");

                    b.HasIndex("Geometry")
                        .HasName("raw_data_noeud_hydrographique_geometry")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("noeud_hydrographique","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PlanDEau", b =>
                {
                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("HautMax")
                        .HasColumnName("haut_max")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("text");

                    b.Property<string>("Maree")
                        .HasColumnName("maree")
                        .HasColumnType("text");

                    b.Property<string>("ModeZMoy")
                        .HasColumnName("mode_z_moy")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("ObtHtMax")
                        .HasColumnName("obt_ht_max")
                        .HasColumnType("text");

                    b.Property<string>("Permanent")
                        .HasColumnName("permanent")
                        .HasColumnType("text");

                    b.Property<string>("PrecZMoy")
                        .HasColumnName("prec_z_moy")
                        .HasColumnType("text");

                    b.Property<string>("RefZMoy")
                        .HasColumnName("ref_z_moy")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.Property<string>("StatutTop")
                        .HasColumnName("statut_top")
                        .HasColumnType("text");

                    b.Property<string>("Toponyme")
                        .HasColumnName("toponyme")
                        .HasColumnType("text");

                    b.Property<string>("ZMoy")
                        .HasColumnName("z_moy")
                        .HasColumnType("text");

                    b.ToTable("plan_d_eau","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Region", b =>
                {
                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("InseeReg")
                        .HasColumnName("insee_reg")
                        .HasColumnType("text");

                    b.Property<string>("NomReg")
                        .HasColumnName("nom_reg")
                        .HasColumnType("text");

                    b.HasIndex("Geometry")
                        .HasName("raw_data_region_geometry")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("region","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.River_Bi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("CountTrash")
                        .HasColumnName("count_trash")
                        .HasColumnType("double precision");

                    b.Property<double?>("CountUniqueTrash")
                        .HasColumnName("count_unique_trash")
                        .HasColumnType("double precision");

                    b.Property<double?>("DistanceMonitored")
                        .HasColumnName("distance_monitored")
                        .HasColumnType("double precision");

                    b.Property<double?>("Length")
                        .HasColumnName("length")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TheGeomMonitored")
                        .HasColumnName("the_geom_monitored")
                        .HasColumnType("geometry");

                    b.Property<decimal?>("TrashPerKm")
                        .HasColumnName("trash_per_km")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasName("river_name");

                    b.HasIndex("TheGeom")
                        .HasName("river_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("river","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.River_Referential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Bras")
                        .HasColumnName("bras")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefCountryFk")
                        .HasColumnName("id_ref_country_fk")
                        .HasColumnType("integer");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCountryFk");

                    b.HasIndex("Importance")
                        .HasName("river_importance");

                    b.HasIndex("Name")
                        .HasName("river_name");

                    b.HasIndex("TheGeom")
                        .HasName("river_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("river","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefCountryFk")
                        .HasColumnName("id_ref_country_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("state_code");

                    b.HasIndex("IdRefCountryFk");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("state_name_key");

                    b.HasIndex("TheGeom")
                        .HasName("state_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("state","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.SurfaceHydrographique", b =>
                {
                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<string>("CodePays")
                        .HasColumnName("code_pays")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<string>("Etat")
                        .HasColumnName("etat")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdCEau")
                        .HasColumnName("id_c_eau")
                        .HasColumnType("text");

                    b.Property<string>("IdEntTr")
                        .HasColumnName("id_ent_tr")
                        .HasColumnType("text");

                    b.Property<string>("IdPEau")
                        .HasColumnName("id_p_eau")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("NomCEau")
                        .HasColumnName("nom_c_eau")
                        .HasColumnType("text");

                    b.Property<string>("NomEntTr")
                        .HasColumnName("nom_ent_tr")
                        .HasColumnType("text");

                    b.Property<string>("NomPEau")
                        .HasColumnName("nom_p_eau")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<string>("Persistanc")
                        .HasColumnName("persistanc")
                        .HasColumnType("text");

                    b.Property<string>("PosSol")
                        .HasColumnName("pos_sol")
                        .HasColumnType("text");

                    b.Property<string>("PrecAlti")
                        .HasColumnName("prec_alti")
                        .HasColumnType("text");

                    b.Property<string>("PrecPlani")
                        .HasColumnName("prec_plani")
                        .HasColumnType("text");

                    b.Property<string>("Salinite")
                        .HasColumnName("salinite")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("SrcAlti")
                        .HasColumnName("src_alti")
                        .HasColumnType("text");

                    b.Property<string>("SrcCoord")
                        .HasColumnName("src_coord")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.ToTable("surface_hydrographique","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Test", b =>
                {
                    b.Property<int?>("B")
                        .HasColumnName("b")
                        .HasColumnType("integer");

                    b.ToTable("test");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Test2", b =>
                {
                    b.Property<string>("B")
                        .HasColumnName("b")
                        .HasColumnType("text");

                    b.ToTable("test2");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.ToponymieHydrographie", b =>
                {
                    b.Property<string>("Classe")
                        .HasColumnName("classe")
                        .HasColumnType("text");

                    b.Property<string>("DateTop")
                        .HasColumnName("date_top")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Graphie")
                        .HasColumnName("graphie")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("StatutTop")
                        .HasColumnName("statut_top")
                        .HasColumnType("text");

                    b.ToTable("toponymie_hydrographie","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Traces", b =>
                {
                    b.Property<double?>("CampaignId")
                        .HasColumnName("campaign_id")
                        .HasColumnType("double precision");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<string>("File")
                        .HasColumnName("file")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Locomotion")
                        .HasColumnName("locomotion")
                        .HasColumnType("text");

                    b.Property<double?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Method")
                        .HasColumnName("method")
                        .HasColumnType("text");

                    b.Property<string>("River")
                        .HasColumnName("river")
                        .HasColumnType("text");

                    b.Property<string>("Riverside")
                        .HasColumnName("riverside")
                        .HasColumnType("text");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("text");

                    b.Property<string>("UserFirstName")
                        .HasColumnName("user_first_name")
                        .HasColumnType("text");

                    b.Property<string>("UserLastName")
                        .HasColumnName("user_last_name")
                        .HasColumnType("text");

                    b.ToTable("traces","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrajectoryPointRiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("ClosestPointTheGeom")
                        .IsRequired()
                        .HasColumnName("closest_point_the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("DistanceRiverTrajectoryPoint")
                        .HasColumnName("distance_river_trajectory_point")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdRefTrajectoryPointFk")
                        .HasColumnName("id_ref_trajectory_point_fk")
                        .HasColumnType("uuid");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<Geometry>("ProjectionTrajectoryPointRiverTheGeom")
                        .IsRequired()
                        .HasColumnName("projection_trajectory_point_river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<string>("RiverName")
                        .HasColumnName("river_name")
                        .HasColumnType("text");

                    b.Property<Geometry>("RiverTheGeom")
                        .IsRequired()
                        .HasColumnName("river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TrajectoryPointTheGeom")
                        .IsRequired()
                        .HasColumnName("trajectory_point_the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("IdRefTrajectoryPointFk")
                        .HasName("trajectory_point_river_id_ref_trajectory_point_fk");

                    b.ToTable("trajectory_point_river","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrajectoryPoint_Bi", b =>
                {
                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("double precision");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<double?>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("double precision");

                    b.Property<double?>("Speed")
                        .HasColumnName("speed")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("TimeDiff")
                        .HasColumnName("time_diff")
                        .HasColumnType("interval");

                    b.ToTable("trajectory_point","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrajectoryPoint_Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("double precision");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<double?>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("double precision");

                    b.Property<double?>("Speed")
                        .HasColumnName("speed")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("TimeDiff")
                        .HasColumnName("time_diff")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk");

                    b.HasIndex("TheGeom")
                        .HasName("trajectory_point_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("trajectory_point","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrashRiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("ClosestPointTheGeom")
                        .IsRequired()
                        .HasColumnName("closest_point_the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("DistanceRiverTrash")
                        .HasColumnName("distance_river_trash")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdRefTrashFk")
                        .HasColumnName("id_ref_trash_fk")
                        .HasColumnType("uuid");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<Geometry>("ProjectionTrashRiverTheGeom")
                        .IsRequired()
                        .HasColumnName("projection_trash_river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<string>("RiverName")
                        .HasColumnName("river_name")
                        .HasColumnType("text");

                    b.Property<Geometry>("RiverTheGeom")
                        .IsRequired()
                        .HasColumnName("river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TrashTheGeom")
                        .IsRequired()
                        .HasColumnName("trash_the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("ClosestPointTheGeom")
                        .HasName("trash_river_closest_point_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("trash_river","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrashType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasName("trash_type_type_key");

                    b.ToTable("trash_type","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Trash_Bi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BrandType")
                        .HasColumnName("brand_type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<string[]>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdRefImageFk")
                        .HasColumnName("id_ref_image_fk")
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("text[]");

                    b.Property<int>("IdRefTrashTypeFk")
                        .HasColumnName("id_ref_trash_type_fk")
                        .HasColumnType("integer");

                    b.Property<double?>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("double precision");

                    b.Property<double?>("Precision")
                        .HasColumnName("precision")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime[]>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone[]");

                    b.HasKey("Id");

                    b.HasIndex("IdRefTrashTypeFk");

                    b.ToTable("trash","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Trash_Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BrandType")
                        .HasColumnName("brand_type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefImageFk")
                        .HasColumnName("id_ref_image_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefTrashTypeFk")
                        .HasColumnName("id_ref_trash_type_fk")
                        .HasColumnType("integer");

                    b.Property<double?>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("double precision");

                    b.Property<double?>("Precision")
                        .HasColumnName("precision")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk");

                    b.HasIndex("IdRefImageFk");

                    b.HasIndex("IdRefModelFk");

                    b.HasIndex("IdRefTrashTypeFk")
                        .HasName("IX_trash_id_ref_trash_type_fk1");

                    b.HasIndex("TheGeom")
                        .HasName("trash_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("trash","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Trash_RawData", b =>
                {
                    b.Property<double?>("CampaignId")
                        .HasColumnName("campaign_id")
                        .HasColumnType("double precision");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<string>("File")
                        .HasColumnName("file")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Locomotion")
                        .HasColumnName("locomotion")
                        .HasColumnType("text");

                    b.Property<double?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Method")
                        .HasColumnName("method")
                        .HasColumnType("text");

                    b.Property<string>("Object")
                        .HasColumnName("object")
                        .HasColumnType("text");

                    b.Property<string>("River")
                        .HasColumnName("river")
                        .HasColumnType("text");

                    b.Property<string>("Riverside")
                        .HasColumnName("riverside")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("text");

                    b.Property<string>("UserFirstName")
                        .HasColumnName("user_first_name")
                        .HasColumnType("text");

                    b.Property<string>("UserLastName")
                        .HasColumnName("user_last_name")
                        .HasColumnType("text");

                    b.ToTable("trash","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TronconHydrographique", b =>
                {
                    b.Property<string>("Bras")
                        .HasColumnName("bras")
                        .HasColumnType("text");

                    b.Property<string>("ClaOrdre")
                        .HasColumnName("cla_ordre")
                        .HasColumnType("text");

                    b.Property<string>("CodeCarth")
                        .HasColumnName("code_carth")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<string>("CodePays")
                        .HasColumnName("code_pays")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<string>("Delimit")
                        .HasColumnName("delimit")
                        .HasColumnType("text");

                    b.Property<string>("Etat")
                        .HasColumnName("etat")
                        .HasColumnType("text");

                    b.Property<string>("Fictif")
                        .HasColumnName("fictif")
                        .HasColumnType("text");

                    b.Property<string>("Fosse")
                        .HasColumnName("fosse")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdCEau")
                        .HasColumnName("id_c_eau")
                        .HasColumnType("text");

                    b.Property<string>("IdEntTr")
                        .HasColumnName("id_ent_tr")
                        .HasColumnType("text");

                    b.Property<string>("IdSHydro")
                        .HasColumnName("id_s_hydro")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Largeur")
                        .HasColumnName("largeur")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("Navigabl")
                        .HasColumnName("navigabl")
                        .HasColumnType("text");

                    b.Property<string>("NomCEau")
                        .HasColumnName("nom_c_eau")
                        .HasColumnType("text");

                    b.Property<string>("NomEntTr")
                        .HasColumnName("nom_ent_tr")
                        .HasColumnType("text");

                    b.Property<string>("NumOrdre")
                        .HasColumnName("num_ordre")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<string>("PerOrdre")
                        .HasColumnName("per_ordre")
                        .HasColumnType("text");

                    b.Property<string>("Persistanc")
                        .HasColumnName("persistanc")
                        .HasColumnType("text");

                    b.Property<string>("PosSol")
                        .HasColumnName("pos_sol")
                        .HasColumnType("text");

                    b.Property<string>("PrecAlti")
                        .HasColumnName("prec_alti")
                        .HasColumnType("text");

                    b.Property<string>("PrecPlani")
                        .HasColumnName("prec_plani")
                        .HasColumnType("text");

                    b.Property<string>("ResCoulan")
                        .HasColumnName("res_coulan")
                        .HasColumnType("text");

                    b.Property<string>("Salinite")
                        .HasColumnName("salinite")
                        .HasColumnType("text");

                    b.Property<string>("SensEcoul")
                        .HasColumnName("sens_ecoul")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("SrcAlti")
                        .HasColumnName("src_alti")
                        .HasColumnType("text");

                    b.Property<string>("SrcCoord")
                        .HasColumnName("src_coord")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.HasIndex("Geometry")
                        .HasName("raw_data_troncon_hydrographique_geometry")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("troncon_hydrographique","raw_data");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<bool>("Emailconfirmed")
                        .HasColumnName("emailconfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Experience")
                        .HasColumnName("experience")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("text");

                    b.Property<bool>("Isdeleted")
                        .HasColumnName("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoggedOn")
                        .HasColumnName("lastloggedon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnName("nickname")
                        .HasColumnType("text");

                    b.Property<string>("Passwordhash")
                        .HasColumnName("passwordhash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Yearofbirth")
                        .HasColumnName("yearofbirth")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Firstname")
                        .HasName("user_firstname");

                    b.HasIndex("Lastname")
                        .HasName("user_lastname");

                    b.HasIndex("Firstname", "Lastname")
                        .IsUnique()
                        .HasName("user_firstname_lastname_key");

                    b.ToTable("user","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.BoundingBoxes", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.User", "Creator")
                        .WithMany("UserBoundingBoxesNavigation")
                        .HasForeignKey("IdCreatorFk")
                        .HasConstraintName("id_creator_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.SchemaMigrator.Models.ImagesForLabelling", "ImageForLabelling")
                        .WithMany("ImagesForLabellingBoundingBoxesNavigation")
                        .HasForeignKey("IdRefImagesForLabelling")
                        .HasConstraintName("id_ref_images_for_labelling_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.SchemaMigrator.Models.TrashType", "TrashType")
                        .WithMany("TrashTypeBoundingBoxesNavigation")
                        .HasForeignKey("IdRefTrashTypeFk")
                        .HasConstraintName("id_ref_trash_type_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Campaign_Campaign", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.AiModel", "IdRefModelFkNavigation")
                        .WithMany("Campaigns_Campaign")
                        .HasForeignKey("IdRefModelFk")
                        .HasConstraintName("campaign_id_ref_model_fk_fkey");

                    b.HasOne("Data.SchemaMigrator.Models.User", "IdRefUserFkNavigation")
                        .WithMany("Campaigns_Campaign")
                        .HasForeignKey("IdRefUserFk")
                        .HasConstraintName("campaign_id_ref_user_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Department", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.State", "IdRefStateFkNavigation")
                        .WithMany("Department")
                        .HasForeignKey("IdRefStateFk")
                        .HasConstraintName("department_id_ref_state_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.ImagesForLabelling", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.User", "Creator")
                        .WithMany("UserImagesForLabellings")
                        .HasForeignKey("IdCreatorFk")
                        .HasConstraintName("id_creator_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.LimitsLandSea", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Country", "IdRefCountryFkNavigation")
                        .WithMany("LimitsLandSea")
                        .HasForeignKey("IdRefCountryFk")
                        .HasConstraintName("limits_land_sea_id_ref_country_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Media", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Campaign_Campaign", "IdRefCampaignFkNavigation")
                        .WithMany("Image")
                        .HasForeignKey("IdRefCampaignFk")
                        .HasConstraintName("image_id_ref_campaign_fk_fkey");

                    b.HasOne("Data.SchemaMigrator.Models.TrajectoryPoint_Campaign", "IdRefTrajectoryPointsFkNavigation")
                        .WithMany("Image")
                        .HasForeignKey("IdRefTrajectoryPointsFk")
                        .HasConstraintName("image_id_ref_trajectory_points_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Municipality", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Department", "IdRefDepartmentFkNavigation")
                        .WithMany("Municipality")
                        .HasForeignKey("IdRefDepartmentFk")
                        .HasConstraintName("municipality_id_ref_department_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.River_Referential", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Country", "IdRefCountryFkNavigation")
                        .WithMany("River")
                        .HasForeignKey("IdRefCountryFk")
                        .HasConstraintName("river_id_ref_country_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.State", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Country", "IdRefCountryFkNavigation")
                        .WithMany("State")
                        .HasForeignKey("IdRefCountryFk")
                        .HasConstraintName("state_id_ref_country_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrajectoryPoint_Campaign", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Campaign_Campaign", "IdRefCampaignFkNavigation")
                        .WithMany("TrajectoryPoints_Campaign")
                        .HasForeignKey("IdRefCampaignFk")
                        .HasConstraintName("trajectory_point_id_ref_campaign_fk_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Trash_Bi", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.TrashType", "IdRefTrashTypeFkNavigation")
                        .WithMany("Trash")
                        .HasForeignKey("IdRefTrashTypeFk")
                        .HasConstraintName("trash_id_ref_trash_type_fk_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Trash_Campaign", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Campaign_Campaign", "IdRefCampaignFkNavigation")
                        .WithMany("Trash1")
                        .HasForeignKey("IdRefCampaignFk")
                        .HasConstraintName("trash_id_ref_campaign_fk_fkey")
                        .IsRequired();

                    b.HasOne("Data.SchemaMigrator.Models.Media", "IdRefImageFkNavigation")
                        .WithMany("Trash1")
                        .HasForeignKey("IdRefImageFk")
                        .HasConstraintName("trash_id_ref_image_fk_fkey");

                    b.HasOne("Data.SchemaMigrator.Models.AiModel", "IdRefModelFkNavigation")
                        .WithMany("Trash1")
                        .HasForeignKey("IdRefModelFk")
                        .HasConstraintName("trash_id_ref_model_fk_fkey");

                    b.HasOne("Data.SchemaMigrator.Models.TrashType", "IdRefTrashTypeFkNavigation")
                        .WithMany("Trash1")
                        .HasForeignKey("IdRefTrashTypeFk")
                        .HasConstraintName("trash_id_ref_trash_type_fk_fkey")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
