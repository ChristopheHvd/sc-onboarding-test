// <auto-generated />
using System;
using System.Collections;
using Data.SchemaMigrator.Models.PgContext.Public;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.SchemaMigrator.Migrations.Pg.Public
{
    [DbContext(typeof(Pg_PublicDataContext))]
    [Migration("20200407114612_initPublicSchema")]
    partial class initPublicSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:pg_buffercache", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:pg_stat_statements", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:pgcrypto", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:pgrouting", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:postgis_topology", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double?>("AvgSpeed")
                        .HasColumnName("avg_speed")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("DistanceStartEnd")
                        .HasColumnName("distance_start_end")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnName("enddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Geometry>("EndingPointTheGeom")
                        .HasColumnName("ending_point_the_geom")
                        .HasColumnType("geometry");

                    b.Property<string>("File")
                        .HasColumnName("file")
                        .HasColumnType("text");

                    b.Property<Guid?>("IdRefUserFk")
                        .HasColumnName("id_ref_user_fk")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Isaidriven")
                        .HasColumnName("isaidriven")
                        .HasColumnType("boolean");

                    b.Property<string>("Locomotion")
                        .IsRequired()
                        .HasColumnName("locomotion")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("text");

                    b.Property<string>("Riverside")
                        .HasColumnName("riverside")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnName("startdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Geometry>("StartingPointTheGeom")
                        .HasColumnName("starting_point_the_geom")
                        .HasColumnType("geometry");

                    b.Property<double?>("TotalDistance")
                        .HasColumnName("total_distance")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdRefUserFk");

                    b.ToTable("campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("country_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("country_name_key");

                    b.HasIndex("TheGeom")
                        .HasName("country_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("country");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.CoursDEau", b =>
                {
                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("text");

                    b.Property<string>("Maree")
                        .HasColumnName("maree")
                        .HasColumnType("text");

                    b.Property<string>("Permanent")
                        .HasColumnName("permanent")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.Property<string>("StatutTop")
                        .HasColumnName("statut_top")
                        .HasColumnType("text");

                    b.Property<string>("Toponyme")
                        .HasColumnName("toponyme")
                        .HasColumnType("text");

                    b.ToTable("cours_d_eau");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefStateFk")
                        .HasColumnName("id_ref_state_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("department_code");

                    b.HasIndex("IdRefStateFk");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("department_name_key");

                    b.HasIndex("TheGeom")
                        .HasName("department_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("department");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.HydroNode06", b =>
                {
                    b.Property<string>("Categorie")
                        .HasColumnName("categorie")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<string>("CodePays")
                        .HasColumnName("code_pays")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdCeAmon")
                        .HasColumnName("id_ce_amon")
                        .HasColumnType("text");

                    b.Property<string>("IdCeAval")
                        .HasColumnName("id_ce_aval")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("PrecAlti")
                        .HasColumnName("prec_alti")
                        .HasColumnType("text");

                    b.Property<string>("PrecPlani")
                        .HasColumnName("prec_plani")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("SrcAlti")
                        .HasColumnName("src_alti")
                        .HasColumnType("text");

                    b.Property<string>("SrcCoord")
                        .HasColumnName("src_coord")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.Property<string>("StatutTop")
                        .HasColumnName("statut_top")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<string>("Toponyme")
                        .HasColumnName("toponyme")
                        .HasColumnType("text");

                    b.ToTable("hydro_node_06");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Blobname")
                        .IsRequired()
                        .HasColumnName("blobname")
                        .HasColumnType("text");

                    b.Property<string>("Containerurl")
                        .IsRequired()
                        .HasColumnName("containerurl")
                        .HasColumnType("text");

                    b.Property<string>("Createdby")
                        .IsRequired()
                        .HasColumnName("createdby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnName("filename")
                        .HasColumnType("text");

                    b.Property<Guid?>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefTrajectoryPointsFk")
                        .HasColumnName("id_ref_trajectory_points_fk")
                        .HasColumnType("uuid");

                    b.Property<BitArray>("Isdeleted")
                        .IsRequired()
                        .HasColumnName("isdeleted")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk");

                    b.HasIndex("IdRefTrajectoryPointsFk");

                    b.ToTable("image");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.LimitsLandSea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefCountryFk")
                        .HasColumnName("id_ref_country_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCountryFk");

                    b.HasIndex("TheGeom")
                        .HasName("limits_land_sea_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("limits_land_sea");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("model");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.MonitoringBlockedQueries", b =>
                {
                    b.Property<int[]>("BlockedBy")
                        .HasColumnName("blocked_by")
                        .HasColumnType("integer[]");

                    b.Property<string>("BlockedQuery")
                        .HasColumnName("blocked_query")
                        .HasColumnType("text");

                    b.Property<int?>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("integer");

                    b.ToTable("monitoring_blocked_queries");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.MonitoringRunningQueries", b =>
                {
                    b.Property<string>("ApplicationName")
                        .HasColumnName("application_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BackendStart")
                        .HasColumnName("backend_start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("integer");

                    b.Property<string>("Query")
                        .HasColumnName("query")
                        .HasColumnType("text");

                    b.Property<DateTime?>("QueryStart")
                        .HasColumnName("query_start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("text");

                    b.Property<string>("WaitEvent")
                        .HasColumnName("wait_event")
                        .HasColumnType("text");

                    b.Property<string>("WaitEventType")
                        .HasColumnName("wait_event_type")
                        .HasColumnType("text");

                    b.ToTable("monitoring_running_queries");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefDepartmentFk")
                        .HasColumnName("id_ref_department_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("municipality_code");

                    b.HasIndex("IdRefDepartmentFk");

                    b.HasIndex("TheGeom")
                        .HasName("municipality_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("municipality");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Node", b =>
                {
                    b.Property<string>("Categorie")
                        .HasColumnName("categorie")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<string>("CodePays")
                        .HasColumnName("code_pays")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdCeAmon")
                        .HasColumnName("id_ce_amon")
                        .HasColumnType("text");

                    b.Property<string>("IdCeAval")
                        .HasColumnName("id_ce_aval")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("PrecAlti")
                        .HasColumnName("prec_alti")
                        .HasColumnType("text");

                    b.Property<string>("PrecPlani")
                        .HasColumnName("prec_plani")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("SrcAlti")
                        .HasColumnName("src_alti")
                        .HasColumnType("text");

                    b.Property<string>("SrcCoord")
                        .HasColumnName("src_coord")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.Property<string>("StatutTop")
                        .HasColumnName("statut_top")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<string>("Toponyme")
                        .HasColumnName("toponyme")
                        .HasColumnType("text");

                    b.HasIndex("TheGeom")
                        .HasName("node_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("node");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.PgBuffercache", b =>
                {
                    b.Property<int?>("Bufferid")
                        .HasColumnName("bufferid")
                        .HasColumnType("integer");

                    b.Property<bool?>("Isdirty")
                        .HasColumnName("isdirty")
                        .HasColumnType("boolean");

                    b.Property<int?>("PinningBackends")
                        .HasColumnName("pinning_backends")
                        .HasColumnType("integer");

                    b.Property<long?>("Relblocknumber")
                        .HasColumnName("relblocknumber")
                        .HasColumnType("bigint");

                    b.Property<uint?>("Reldatabase")
                        .HasColumnName("reldatabase")
                        .HasColumnType("oid");

                    b.Property<uint?>("Relfilenode")
                        .HasColumnName("relfilenode")
                        .HasColumnType("oid");

                    b.Property<short?>("Relforknumber")
                        .HasColumnName("relforknumber")
                        .HasColumnType("smallint");

                    b.Property<uint?>("Reltablespace")
                        .HasColumnName("reltablespace")
                        .HasColumnType("oid");

                    b.Property<short?>("Usagecount")
                        .HasColumnName("usagecount")
                        .HasColumnType("smallint");

                    b.ToTable("pg_buffercache");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.PgStatStatements", b =>
                {
                    b.Property<double?>("BlkReadTime")
                        .HasColumnName("blk_read_time")
                        .HasColumnType("double precision");

                    b.Property<double?>("BlkWriteTime")
                        .HasColumnName("blk_write_time")
                        .HasColumnType("double precision");

                    b.Property<long?>("Calls")
                        .HasColumnName("calls")
                        .HasColumnType("bigint");

                    b.Property<uint?>("Dbid")
                        .HasColumnName("dbid")
                        .HasColumnType("oid");

                    b.Property<long?>("LocalBlksDirtied")
                        .HasColumnName("local_blks_dirtied")
                        .HasColumnType("bigint");

                    b.Property<long?>("LocalBlksHit")
                        .HasColumnName("local_blks_hit")
                        .HasColumnType("bigint");

                    b.Property<long?>("LocalBlksRead")
                        .HasColumnName("local_blks_read")
                        .HasColumnType("bigint");

                    b.Property<long?>("LocalBlksWritten")
                        .HasColumnName("local_blks_written")
                        .HasColumnType("bigint");

                    b.Property<double?>("MaxTime")
                        .HasColumnName("max_time")
                        .HasColumnType("double precision");

                    b.Property<double?>("MeanTime")
                        .HasColumnName("mean_time")
                        .HasColumnType("double precision");

                    b.Property<double?>("MinTime")
                        .HasColumnName("min_time")
                        .HasColumnType("double precision");

                    b.Property<string>("Query")
                        .HasColumnName("query")
                        .HasColumnType("text");

                    b.Property<long?>("Queryid")
                        .HasColumnName("queryid")
                        .HasColumnType("bigint");

                    b.Property<long?>("Rows")
                        .HasColumnName("rows")
                        .HasColumnType("bigint");

                    b.Property<long?>("SharedBlksDirtied")
                        .HasColumnName("shared_blks_dirtied")
                        .HasColumnType("bigint");

                    b.Property<long?>("SharedBlksHit")
                        .HasColumnName("shared_blks_hit")
                        .HasColumnType("bigint");

                    b.Property<long?>("SharedBlksRead")
                        .HasColumnName("shared_blks_read")
                        .HasColumnType("bigint");

                    b.Property<long?>("SharedBlksWritten")
                        .HasColumnName("shared_blks_written")
                        .HasColumnType("bigint");

                    b.Property<double?>("StddevTime")
                        .HasColumnName("stddev_time")
                        .HasColumnType("double precision");

                    b.Property<long?>("TempBlksRead")
                        .HasColumnName("temp_blks_read")
                        .HasColumnType("bigint");

                    b.Property<long?>("TempBlksWritten")
                        .HasColumnName("temp_blks_written")
                        .HasColumnType("bigint");

                    b.Property<double?>("TotalTime")
                        .HasColumnName("total_time")
                        .HasColumnType("double precision");

                    b.Property<uint?>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("oid");

                    b.ToTable("pg_stat_statements");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.River", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Bras")
                        .HasColumnName("bras")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefCountryFk")
                        .HasColumnName("id_ref_country_fk")
                        .HasColumnType("integer");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCountryFk");

                    b.HasIndex("Importance")
                        .HasName("river_importance");

                    b.HasIndex("Name")
                        .HasName("river_name");

                    b.HasIndex("TheGeom")
                        .HasName("river_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("river");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.River06", b =>
                {
                    b.Property<string>("Bras")
                        .HasColumnName("bras")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<int?>("IdRefCountryFk")
                        .HasColumnName("id_ref_country_fk")
                        .HasColumnType("integer");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.ToTable("river_06");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.River06Ce", b =>
                {
                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.ToTable("river_06_ce");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefCountryFk")
                        .HasColumnName("id_ref_country_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("state_code");

                    b.HasIndex("IdRefCountryFk");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("state_name_key");

                    b.HasIndex("TheGeom")
                        .HasName("state_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("state");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.SurfaceHydrographique", b =>
                {
                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<string>("CodePays")
                        .HasColumnName("code_pays")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("text");

                    b.Property<string>("DateConf")
                        .HasColumnName("date_conf")
                        .HasColumnType("text");

                    b.Property<string>("DateCreat")
                        .HasColumnName("date_creat")
                        .HasColumnType("text");

                    b.Property<string>("DateMaj")
                        .HasColumnName("date_maj")
                        .HasColumnType("text");

                    b.Property<string>("Etat")
                        .HasColumnName("etat")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geometry")
                        .HasColumnName("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("IdCEau")
                        .HasColumnName("id_c_eau")
                        .HasColumnType("text");

                    b.Property<string>("IdEntTr")
                        .HasColumnName("id_ent_tr")
                        .HasColumnType("text");

                    b.Property<string>("IdPEau")
                        .HasColumnName("id_p_eau")
                        .HasColumnType("text");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("NomCEau")
                        .HasColumnName("nom_c_eau")
                        .HasColumnType("text");

                    b.Property<string>("NomEntTr")
                        .HasColumnName("nom_ent_tr")
                        .HasColumnType("text");

                    b.Property<string>("NomPEau")
                        .HasColumnName("nom_p_eau")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<string>("Persistanc")
                        .HasColumnName("persistanc")
                        .HasColumnType("text");

                    b.Property<string>("PosSol")
                        .HasColumnName("pos_sol")
                        .HasColumnType("text");

                    b.Property<string>("PrecAlti")
                        .HasColumnName("prec_alti")
                        .HasColumnType("text");

                    b.Property<string>("PrecPlani")
                        .HasColumnName("prec_plani")
                        .HasColumnType("text");

                    b.Property<string>("Salinite")
                        .HasColumnName("salinite")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.Property<string>("SrcAlti")
                        .HasColumnName("src_alti")
                        .HasColumnType("text");

                    b.Property<string>("SrcCoord")
                        .HasColumnName("src_coord")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnName("statut")
                        .HasColumnType("text");

                    b.ToTable("surface_hydrographique");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.TrajectoryPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("double precision");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<double?>("Speed")
                        .HasColumnName("speed")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("TimeDiff")
                        .HasColumnName("time_diff")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk");

                    b.HasIndex("TheGeom")
                        .HasName("trajectory_point_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("trajectory_point");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.TrajectoryPointRiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("ClosestPointTheGeom")
                        .IsRequired()
                        .HasColumnName("closest_point_the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("DistanceRiverTrajectoryPoint")
                        .HasColumnName("distance_river_trajectory_point")
                        .HasColumnType("double precision");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdRefTrajectoryPointFk")
                        .HasColumnName("id_ref_trajectory_point_fk")
                        .HasColumnType("uuid");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<Geometry>("ProjectionTrajectoryPointRiverTheGeom")
                        .IsRequired()
                        .HasColumnName("projection_trajectory_point_river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("RiverTheGeom")
                        .IsRequired()
                        .HasColumnName("river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TrajectoryPointTheGeom")
                        .IsRequired()
                        .HasColumnName("trajectory_point_the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("IdRefRiverFk");

                    b.HasIndex("IdRefTrajectoryPointFk");

                    b.ToTable("trajectory_point_river");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Trash", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BrandType")
                        .HasColumnName("brand_type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefImageFk")
                        .HasColumnName("id_ref_image_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefTrashTypeFk")
                        .HasColumnName("id_ref_trash_type_fk")
                        .HasColumnType("integer");

                    b.Property<double?>("Precision")
                        .HasColumnName("precision")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk");

                    b.HasIndex("IdRefImageFk");

                    b.HasIndex("IdRefModelFk");

                    b.HasIndex("IdRefTrashTypeFk");

                    b.HasIndex("TheGeom")
                        .HasName("trash_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("trash");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.TrashRiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("ClosestPointTheGeom")
                        .IsRequired()
                        .HasColumnName("closest_point_the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("DistanceRiverTrash")
                        .HasColumnName("distance_river_trash")
                        .HasColumnType("double precision");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdRefTrashFk")
                        .HasColumnName("id_ref_trash_fk")
                        .HasColumnType("uuid");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<Geometry>("ProjectionTrashRiverTheGeom")
                        .IsRequired()
                        .HasColumnName("projection_trash_river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("RiverTheGeom")
                        .IsRequired()
                        .HasColumnName("river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TrashTheGeom")
                        .IsRequired()
                        .HasColumnName("trash_the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("ClosestPointTheGeom")
                        .HasName("trash_river_closest_point_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.HasIndex("IdRefRiverFk");

                    b.HasIndex("IdRefTrashFk");

                    b.ToTable("trash_river");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.TrashType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasName("trash_type_type_key");

                    b.ToTable("trash_type");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.UserCampaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<bool>("Emailconfirmed")
                        .HasColumnName("emailconfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Experience")
                        .HasColumnName("experience")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("text");

                    b.Property<bool>("Isdeleted")
                        .HasColumnName("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("text");

                    b.Property<string>("Passwordhash")
                        .HasColumnName("passwordhash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Yearofbirth")
                        .HasColumnName("yearofbirth")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Firstname")
                        .HasName("user_campaign_firstname");

                    b.HasIndex("Lastname")
                        .HasName("user_campaign_lastname");

                    b.HasIndex("Firstname", "Lastname")
                        .IsUnique()
                        .HasName("user_campaign_firstname_lastname_key");

                    b.ToTable("user_campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Campaign", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.UserCampaign", "IdRefUserFkNavigation")
                        .WithMany("Campaign")
                        .HasForeignKey("IdRefUserFk")
                        .HasConstraintName("campaign_id_ref_user_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Department", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.State", "IdRefStateFkNavigation")
                        .WithMany("Department")
                        .HasForeignKey("IdRefStateFk")
                        .HasConstraintName("department_id_ref_state_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Image", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.Campaign", "IdRefCampaignFkNavigation")
                        .WithMany("Image")
                        .HasForeignKey("IdRefCampaignFk")
                        .HasConstraintName("image_id_ref_campaign_fk_fkey");

                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.TrajectoryPoint", "IdRefTrajectoryPointsFkNavigation")
                        .WithMany("Image")
                        .HasForeignKey("IdRefTrajectoryPointsFk")
                        .HasConstraintName("image_id_ref_trajectory_points_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.LimitsLandSea", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.Country", "IdRefCountryFkNavigation")
                        .WithMany("LimitsLandSea")
                        .HasForeignKey("IdRefCountryFk")
                        .HasConstraintName("limits_land_sea_id_ref_country_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Municipality", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.Department", "IdRefDepartmentFkNavigation")
                        .WithMany("Municipality")
                        .HasForeignKey("IdRefDepartmentFk")
                        .HasConstraintName("municipality_id_ref_department_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.River", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.Country", "IdRefCountryFkNavigation")
                        .WithMany("River")
                        .HasForeignKey("IdRefCountryFk")
                        .HasConstraintName("river_id_ref_country_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.State", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.Country", "IdRefCountryFkNavigation")
                        .WithMany("State")
                        .HasForeignKey("IdRefCountryFk")
                        .HasConstraintName("state_id_ref_country_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.TrajectoryPoint", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.Campaign", "IdRefCampaignFkNavigation")
                        .WithMany("TrajectoryPoint")
                        .HasForeignKey("IdRefCampaignFk")
                        .HasConstraintName("trajectory_point_id_ref_campaign_fk_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.TrajectoryPointRiver", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.River", "IdRefRiverFkNavigation")
                        .WithMany("TrajectoryPointRiver")
                        .HasForeignKey("IdRefRiverFk")
                        .HasConstraintName("trajectory_point_river_id_ref_river_fk_fkey")
                        .IsRequired();

                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.TrajectoryPoint", "IdRefTrajectoryPointFkNavigation")
                        .WithMany("TrajectoryPointRiver")
                        .HasForeignKey("IdRefTrajectoryPointFk")
                        .HasConstraintName("trajectory_point_river_id_ref_trajectory_point_fk_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.Trash", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.Campaign", "IdRefCampaignFkNavigation")
                        .WithMany("Trash")
                        .HasForeignKey("IdRefCampaignFk")
                        .HasConstraintName("trash_id_ref_campaign_fk_fkey")
                        .IsRequired();

                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.Image", "IdRefImageFkNavigation")
                        .WithMany("Trash")
                        .HasForeignKey("IdRefImageFk")
                        .HasConstraintName("trash_id_ref_image_fk_fkey");

                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.Model", "IdRefModelFkNavigation")
                        .WithMany("Trash")
                        .HasForeignKey("IdRefModelFk")
                        .HasConstraintName("trash_id_ref_model_fk_fkey");

                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.TrashType", "IdRefTrashTypeFkNavigation")
                        .WithMany("Trash")
                        .HasForeignKey("IdRefTrashTypeFk")
                        .HasConstraintName("trash_id_ref_trash_type_fk_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.Public.TrashRiver", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.River", "IdRefRiverFkNavigation")
                        .WithMany("TrashRiver")
                        .HasForeignKey("IdRefRiverFk")
                        .HasConstraintName("trash_river_id_ref_river_fk_fkey")
                        .IsRequired();

                    b.HasOne("Data.SchemaMigrator.Models.PgContext.Public.Trash", "IdRefTrashFkNavigation")
                        .WithMany("TrashRiver")
                        .HasForeignKey("IdRefTrashFk")
                        .HasConstraintName("trash_river_id_ref_trash_fk_fkey")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
