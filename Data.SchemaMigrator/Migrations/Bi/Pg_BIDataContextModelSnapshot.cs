// <auto-generated />
using System;
using Data.SchemaMigrator.Models.PgContext.BI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.SchemaMigrator.Migrations.Bi
{
    [DbContext(typeof(Pg_BIDataContext))]
    partial class Pg_BIDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:pg_buffercache", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:pg_stat_statements", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:pgcrypto", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:pgrouting", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:postgis_topology", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.BI.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AvgSpeed")
                        .HasColumnName("avg_speed")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("date");

                    b.Property<double?>("DistanceStartEnd")
                        .HasColumnName("distance_start_end")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<Geometry>("EndPoint")
                        .HasColumnName("end_point")
                        .HasColumnType("geometry");

                    b.Property<double?>("EndPointDistanceSea")
                        .HasColumnName("end_point_distance_sea")
                        .HasColumnType("double precision");

                    b.Property<string>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<Geometry>("StartPoint")
                        .HasColumnName("start_point")
                        .HasColumnType("geometry");

                    b.Property<double?>("StartPointDistanceSea")
                        .HasColumnName("start_point_distance_sea")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalDistance")
                        .HasColumnName("total_distance")
                        .HasColumnType("double precision");

                    b.Property<int?>("TrashCount")
                        .HasColumnName("trash_count")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EndPoint")
                        .HasName("campaign_end_point")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.HasIndex("IdRefCampaignFk")
                        .HasName("campaign_id_ref_campaign_fk");

                    b.HasIndex("StartPoint")
                        .HasName("campaign_start_point")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("campaign","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.BI.CampaignRiver", b =>
                {
                    b.Property<double?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<string>("RiverName")
                        .HasColumnName("river_name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.ToTable("campaign_river","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.BI.Logs", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<double?>("ElapsedTime")
                        .HasColumnName("elapsed_time")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("FinishedOn")
                        .HasColumnName("finished_on")
                        .HasColumnType("date");

                    b.Property<DateTime>("InitiatedOn")
                        .HasColumnName("initiated_on")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("logs","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.BI.River", b =>
                {
                    b.Property<double?>("DistanceMonitored")
                        .HasColumnName("distance_monitored")
                        .HasColumnType("double precision");

                    b.Property<double?>("Length")
                        .HasColumnName("length")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("Trace")
                        .HasColumnName("trace")
                        .HasColumnType("geometry");

                    b.Property<long?>("TrashDetected")
                        .HasColumnName("trash_detected")
                        .HasColumnType("bigint");

                    b.ToTable("river","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.BI.TrajectoryPointRiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("ClosestPointTheGeom")
                        .IsRequired()
                        .HasColumnName("closest_point_the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("DistanceRiverTrajectoryPoint")
                        .HasColumnName("distance_river_trajectory_point")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdRefTrajectoryPointFk")
                        .HasColumnName("id_ref_trajectory_point_fk")
                        .HasColumnType("uuid");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<Geometry>("ProjectionTrajectoryPointRiverTheGeom")
                        .IsRequired()
                        .HasColumnName("projection_trajectory_point_river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<string>("RiverName")
                        .HasColumnName("river_name")
                        .HasColumnType("text");

                    b.Property<Geometry>("RiverTheGeom")
                        .IsRequired()
                        .HasColumnName("river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TrajectoryPointTheGeom")
                        .IsRequired()
                        .HasColumnName("trajectory_point_the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.ToTable("trajectory_point_river","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.BI.Trash", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BrandType")
                        .HasColumnName("brand_type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<string[]>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdRefImageFk")
                        .HasColumnName("id_ref_image_fk")
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("text[]");

                    b.Property<int>("IdRefTrashTypeFk")
                        .HasColumnName("id_ref_trash_type_fk")
                        .HasColumnType("integer");

                    b.Property<double?>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("double precision");

                    b.Property<double?>("Precision")
                        .HasColumnName("precision")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime[]>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone[]");

                    b.HasKey("Id");

                    b.ToTable("trash","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.PgContext.BI.TrashRiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("ClosestPointTheGeom")
                        .IsRequired()
                        .HasColumnName("closest_point_the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("DistanceRiverTrash")
                        .HasColumnName("distance_river_trash")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdRefTrashFk")
                        .HasColumnName("id_ref_trash_fk")
                        .HasColumnType("uuid");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<Geometry>("ProjectionTrashRiverTheGeom")
                        .IsRequired()
                        .HasColumnName("projection_trash_river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<string>("RiverName")
                        .HasColumnName("river_name")
                        .HasColumnType("text");

                    b.Property<Geometry>("RiverTheGeom")
                        .IsRequired()
                        .HasColumnName("river_the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TrashTheGeom")
                        .IsRequired()
                        .HasColumnName("trash_the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("ClosestPointTheGeom")
                        .HasName("bi_trash_river_closest_point_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("trash_river","bi");
                });
#pragma warning restore 612, 618
        }
    }
}
